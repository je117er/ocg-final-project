// Code generated by sqlc. DO NOT EDIT.
// source: product.sql

package db

import (
	"context"
	"database/sql"
	"github.com/je117er/ocg-final-project/internal/models"
)

const getProduct = `-- name: GetProduct :one
SELECT id, name, price, vendor, vaccine_type, authorized_ages, dose, antigen_nature, route_of_administration, storage_requirements, available_formats, diluent, adjuvant, alternate_name, minimum_interval, immunization_schedule, authorized_interval, extended_interval, background, regulatory_actions, safety_status, authorization_status, trials, distribution, funding, slug, image, lot_number, expiry_date
FROM product
WHERE slug = ? LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, slug sql.NullString) (models.Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, slug)
	var i models.Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Vendor,
		&i.VaccineType,
		&i.AuthorizedAges,
		&i.Dose,
		&i.AntigenNature,
		&i.RouteOfAdministration,
		&i.StorageRequirements,
		&i.AvailableFormats,
		&i.Diluent,
		&i.Adjuvant,
		&i.AlternateName,
		&i.MinimumInterval,
		&i.ImmunizationSchedule,
		&i.AuthorizedInterval,
		&i.ExtendedInterval,
		&i.Background,
		&i.RegulatoryActions,
		&i.SafetyStatus,
		&i.AuthorizationStatus,
		&i.Trials,
		&i.Distribution,
		&i.Funding,
		&i.Slug,
		&i.Image,
		&i.LotNumber,
		&i.ExpiryDate,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, price, vendor, vaccine_type, authorized_ages, dose, antigen_nature, route_of_administration, storage_requirements, available_formats, diluent, adjuvant, alternate_name, minimum_interval, immunization_schedule, authorized_interval, extended_interval, background, regulatory_actions, safety_status, authorization_status, trials, distribution, funding, slug, image, lot_number, expiry_date
FROM product
`

func (q *Queries) GetProducts(ctx context.Context) ([]models.Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []models.Product
	for rows.Next() {
		var i models.Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Vendor,
			&i.VaccineType,
			&i.AuthorizedAges,
			&i.Dose,
			&i.AntigenNature,
			&i.RouteOfAdministration,
			&i.StorageRequirements,
			&i.AvailableFormats,
			&i.Diluent,
			&i.Adjuvant,
			&i.AlternateName,
			&i.MinimumInterval,
			&i.ImmunizationSchedule,
			&i.AuthorizedInterval,
			&i.ExtendedInterval,
			&i.Background,
			&i.RegulatoryActions,
			&i.SafetyStatus,
			&i.AuthorizationStatus,
			&i.Trials,
			&i.Distribution,
			&i.Funding,
			&i.Slug,
			&i.Image,
			&i.LotNumber,
			&i.ExpiryDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
