// Code generated by sqlc. DO NOT EDIT.
// source: customer.sql

package db

import (
	"context"
	"database/sql"
	"github.com/je117er/ocg-final-project/internal/models"
)

const getAllCustomers = `-- name: GetAllCustomers :many
select id, email, name, address, gender, dob, phone_number, insurance_number, city, district, commune, ethnicity, nationality
from customer
`

func (q *Queries) GetAllCustomers(ctx context.Context) ([]models.Customer, error) {
	rows, err := q.db.QueryContext(ctx, getAllCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []models.Customer
	for rows.Next() {
		var i models.Customer
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.Address,
			&i.Gender,
			&i.Dob,
			&i.PhoneNumber,
			&i.InsuranceNumber,
			&i.City,
			&i.District,
			&i.Commune,
			&i.Ethnicity,
			&i.Nationality,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, email, name, address, gender, dob, phone_number, insurance_number, city, district, commune, ethnicity, nationality
FROM customer
where id = ? limit 1
`

func (q *Queries) GetCustomer(ctx context.Context, id int32) (models.Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i models.Customer
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Address,
		&i.Gender,
		&i.Dob,
		&i.PhoneNumber,
		&i.InsuranceNumber,
		&i.City,
		&i.District,
		&i.Commune,
		&i.Ethnicity,
		&i.Nationality,
	)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customer
SET
    name = ?,
    address = ?,
    gender = ?,
    dob = ?,
    insurance_number = ?,
    district = ?,
    city = ?,
    commune = ?,
    ethnicity = ?,
    nationality = ?
WHERE id = ?
`

type UpdateCustomerParams struct {
	Name            sql.NullString
	Address         sql.NullString
	Gender          sql.NullString
	Dob             sql.NullTime
	InsuranceNumber sql.NullString
	District        sql.NullString
	City            sql.NullString
	Commune         sql.NullString
	Ethnicity       sql.NullString
	Nationality     sql.NullString
	ID              int32
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomer,
		arg.Name,
		arg.Address,
		arg.Gender,
		arg.Dob,
		arg.InsuranceNumber,
		arg.District,
		arg.City,
		arg.Commune,
		arg.Ethnicity,
		arg.Nationality,
		arg.ID,
	)
	return err
}
